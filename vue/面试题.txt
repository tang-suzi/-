1.v-model是什么? 怎么使用? vue标签怎样绑定事件?
    可以实现双向绑定 指令(v-class、v-for、v-if、v-show、v-on) vue的model层的data属性 绑定事件 <input @click=doLog() />

2.mvvm框架是什么? 它和其他框架(jquery)的区别是什么 哪些场景适合?
    一个model+view+viewModel框架 数据模型model,viewModel连接两个
    区别: vue数据驱动 通过数据来显示视图层而不是节点操作
    场景: 数据操作比较多的场景 更加便捷

3. 说出至少4种vue中的指令和它的用法
    v-if: 判断是否隐藏
    v-for: 数据循环出来
    v-bind:class: 绑定一个属性
    v-model: 实现双向绑定

4.v-show和v-if指令的共同点和不同点
    v-show指令是通过修改元素的display CSS属性让其显示或隐藏
    v-if指令是直接销毁和重建DOM达到让元素显示和隐藏的效果

5.如何让CSS只在当前组件中起作用?
    将当前组件的<style>修改为<style scoped>

6.<keep-alive></keep-alive>的作用是什么?
    <keep-alive></keep-alive>包裹动态组件时 会缓存不活动的组件实例 主要用于保留组件状态和避免重新渲染
        比如又一个列表和一个详情 那么用户就会经常执行打开详情=>返回列表=>打开详情…这样的话 列表和详情都是一个频率很高的页面 那么就对列表组件使用<keep-alive></keep-alive>进行缓存 这样用户每次返回列表的时候 都能从缓存中快速渲染 而不是重新渲染

7.指令v-el的作用是什么
    提供一个在页面上已存在的DOM元素作为Vue实例的挂载目标 可以是CSS选择器 也可以是一个HTMLElement实例

8.在Vue中使用插件的步骤
    采用ES6的import…from…语法 或CommonJS的require()方法引入插件

    使用全局方法Vue.use(plugin)使用插件 可以传入一个选项对象Vue.use(MyPlugin,{someOption:true})

9.组建创建的方式
    1.直接在template属性中指定模版内容
        1.全局组件
            Vue.component
        2.局部组件
            {
                components:{
                    'my-footer':{template:''}
                }
            }

    2.Vue结尾的文件
        <template></template>
        <script></script>
        <style></style>

    3.单独指定一个模版内容
        <script id='myContent' type='text/x-template'>
            Vue.component('',{
                template:'#myContent'
            })
        </script>

10.生命周期
    四个阶段    
        create 准备工作(数据的初始化)
        mount 挂载前后针对元素进行操作
        update 数据发生变化
        destroy 清理工作(关闭定时器、集合清空)
        bfeoreCreate/created
        beforeMount/mounted
        beforeUpdate/updated
        beforeDestroy/destroyed

11.组件间通信
    1.父子组件通信(props down)
        1.发送
            <son myName='zhangsan'></son>
        2.接收
            到son组件:
            Vue.component('son',{
                props:['myName'],
                template:`<p>{{myName}}</p>`
            })

    2.子父通信(events up)
        1.绑定
        methods:{
            handleEvent:function(msg){}
        }
        <son @customEvent='handleEvent'></son>