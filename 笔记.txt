import  和 link 的本质区别
css放在body的前面   js放在body的末尾
js body中编写的都是html标签 js很多时候需要操作这些元素 首先我们要保证元素加载成功 才可以在js中获取到这些元素所以 js放在body的末尾
如果 js放在html标签的前面了  就需要把js放在window.onload=function(){}里面 页面中所有资源文件都加载完成 或者 $(function(){})  或者 window.addEventListener('load',function(){},false) window.attachEvent('onreadystatechange',function(){})

js输出方式  alert 在浏览器中弹出一个提示框（提供确定按钮  点击确定 弹框消失）使用alert弹框提示信息 提示的内容最后都会被转换为字符串输出（调用了toString方法）

          confirm 在alert的基础上 增加了让用户选择性的操作(提供两个按钮 确定和取消)
          confirm('确定要删除么')
          如何接收用户点击的是确定还是取消？ 在前面定义一个变量 var 变量名= confirm('确定要删除么')
          当用户点击确定按钮的时候，我们接收到的结果是true 点击的是取消按钮 我们接收到的结果是false 此后 我们可以根据接收的结果做不同的处理
          跟alert一样 confirm在浏览器弹出框输出的内容也都会转化为字符串格式

          prompt： 在confirm基础上增加让用户输入的效果
          用户点击取消按钮 我们获取到的结果是null 如果用户点击的是确定按钮
          我嫩将会获取到用户输入的内容 如果用户没有输入任何内容 我们获取的结果是空字符串

          真实项目中 尤其是需要央视精美的网站中 我们的提示框一般都是自己封装插件和组件来实现 不用内置的(使用原生的js封装模态框组建)

          控制台输出  方便开发人员进行调试的
          console.log 在控制台输出 又是不会转换数据类型 输出什么格式的数据都可以
          conole.dir 比log输出的详细一些
          console.table 把json数据展示为一个表格

          document.write 在页面中打印输出内容

          js是由三部分组成的 1 ECMAscript 规定了JS的一些基础核心只是(变量/数据类型/语法规范/操作语句等)
          DOM document object model 文档对象模型 里面提供了一些属性和方法 可以让我们操作页面中的元素

          BOM browser object model 浏览器对象模型 里面提供了一些属性和方法可以让我们操作浏览器

          js中的变量和常量 
          什么是变量 值是可以变得
          什么是常量 值是不可变的
          js中定义变量的方式 var 来定义变量 var a = ‘值’

          变量 只是一个无意义的名字 他所代表的意义都是其存储的那个值
          任何一个具体数据值 都是常量  和变量类似 我们设置一个常量 给其存储一个值 但是存储的值不能修改 const定义常量

          js命名规范 
            1. js中严格区分大小写 
            2. 遵循国际命名规则 驼峰命名法 第一个单词首字母小写 其余每个有意义单词首字母大写
            3. 命名使用英文单词 不要使用拼音
               不是所有单词都能简写 我们需要保证大家看到名字后知道所代表的意思
               
               常用的简写单词
                    info： information 信息
                    init： initialization 初始化
                    add / insert / create： 增加 创建 插入
                    remove / rm /clear / del / delete： 删除
                    update： 修改 更新
                    get / query / select ： 查询 获取
            
            4. 命名的时候可以使用$ _ 数字 字母，但是数字不能作为名字的第一位
                var $xxx: //=>一般是应用jq获取到的值
                var _xxx：//=>一般这样的情况代表变量是一个全局或者公用的变量

            5. js中很多的词都是有特殊含义的 我们这些词叫做关键字  现在没有特殊含义 以后可能会作为关键词的 我们叫做保留字 而关键字和保留字都不可以随便用来命名；

数据类型分类和检测
    基本数据类型(值类型)
        number： 数字
            js多增加了一个number类型的数据 NaN 
                typeof NaN -> 'number'
            NaN not a number: 不是一个数，但是属于number类型
                NaN == NaN: false，和任何其他值都不相等
                isNaN(): 用来检测当前这个值是否是非有效数字 如果不是有效数字 检测的结果是true 反之是有效数字则为false
                isNaN(0) -> false
                isNaN(NaN) -> true
                isNaN('12') -> false 
                当我们使用isNaN检测值的时候 检测的值不是number类型的，浏览器会默认的把值先转化为number类型 然后再去检测 使用Number()
                isNaN([]) -> false
                isNaN(true) -> false
            Number()把其他数据类型值转化为number类型的值 使用此方法转化的时候 只要字符串中出现任何一个非有效数字字符 最后的结果都是NaN
                Number(true) -> 1
                Number(false) -> 0
                Number(null) -> 0
                Number(undefined) -> NaN
                Number([]) ->   引用数据类型转化为number 首先需要把引用数据类型转化为字符串(toString), 再把字符串转化为number 例: []-> '' ''-> 0
                Number([12]) => [12]-> '12' '12'->12
                Number([1,2]) => [1,2]->'1,2' '1,2'-> NaN
                Number({}) -> NaN

                parseInt(): 提取字符串中的有效数字 把其他数据类型的值转化为number 提取规则 从左到右依次查找有效数字 直到遇见非有效数字为止(不管后面有没有都不着了)，把找到的转化为数字 识别不了小数点

                parseFloat() 在parseInt的基础上可以识别小数点

                parseInt常用的只需要传递一个值作为参数即可 但是它支持多个参数 查一下

        string： 字符串（单双引号包裹起来的 都是字符串）
            在js中‘’和“”包起来的 都是字符串
            常用方法 charAt charCodeAt
                    substr substring slice
                    toUpperCase toLowerCase
                    indexOf lastIndexOf
                    split
                    replace
                    match

        boolean： 布尔 true false 或者结果为true或false的表达式
            boolean()把其他数据类型的值转化为布尔类型
                只有0 NaN 空字符串 null undefined 只有这五个数据值转化为布尔类型的false 其余的 都转化为true
            !!在一个！的基础上   再取反 取两次反 相当于没有操作 却已经把其他数据类型的值转化为布尔类型 相当于boolean()

            !在js当中还有一个作用  取反 先把值转化为布尔类型 再取反
            != 不等于

        null： 空对象指针
        undefined： 未定义
        null 和 undefined： 
            null 是空 是没有的意思
            undefined 未定义 是没有的意思
            ‘’： 空字符串 是没有的意思
            0: 也可以理解为没有

            ‘’和null的区别 
                空字符串 都是去种树 空字符串 属于挖个坑没种 null属于坑都没挖
                空字符串相对于null来说  开辟了内存地址 消耗了一些性能
            null和undefined的区别 
                null表示暂时没有 预期中以后会有 可能以后也没有达到预期 在js中 null一般都是手动先赋值为null 后期我们再给其赋值

                undefined 完全没在预料之内的

    引用数据类型
        object： 对象数据类型
            {} 普通对象 {name: 'tom',age: 8}
            [] 对象 [12,23,34]
            /^$/正则 /^-?(\d|([1-9]\d+))(\.\d+)?$/ 验证是不是有效数字
            等

            每一个对象都是由0到多组 属性名（key）：属性值（val） 组成的，或者说由多组键值对组成的，每一组简直对中间用逗号分割
            属性： 描述这个对象特点特征的

            对象的属性名是字符串或者数字格式的，存储的属性值可以是任何的数据类型

            获取某个属性名对应的属性值
            obj.name 对象名.属性名 忽略了属性名的单双引号
            obj['name'] 对象名[属性名] 不能忽略单双引号
            如果属性名是数字 如何操作： obj.0不支持 只能obj[0]或者obj['0']

            如果操作的属性在对象中不存在，获取的结果是undefined

        function： 函数数据类型
            function fn (){}

    检测数据类型常用的方式
        1.typeof： 检测数据类型的运算符
            使用typeof检测  返回的结果是一个字符串 返回的结果包含的内容证明了值是属于什么类型的
            局限性： 
                1. typeof null的结果是字符串object 因为null虽然是单独的一个数据类型 但是它原本意思是空对象指针 浏览器使用typeof检测的时候会把它按照对象来检测
                2. 使用typeof我们无法细分出到底是数组还是正则 因为返回的结果都是object
        2.instanceof： 检测某个实例是否属于这个类 (什么是实例什么是类) 查一下
            用来检测constructor。prototype是否存在于参数object的原型链上
        3.consutructor： 获取当前实例的构造器                      查一下
        4.object.prototype.toString.call: 获取当前实例的所属类信息 查一下

    基本数据类型和饮用数据类型的区别
        js是运行在浏览器的(内核引擎)，浏览器会为js提供赖以生存的环境(提供给js代码执行的环境)=>全局作用域(前端window后台global)
            var a = 12;
            var b = a;
            b=13;
            console.log(a);  => 12

            var c = {name: 'tang'};
            var d = c;
            c.name = 'yuan';
            console.log(c.name) => 'yuan'

            基本数据类型是按值操作的 基本数据类型在赋值的时候 是直接把值赋值给变量即可
            饮用数据类型是按照空间地址(引用地址)来操作的：
                var n = { name: 'tang' };
                1.先创建一个变量n
                2.浏览器首先会开辟一个新的存储空间(内存空间)，目的是把对象中需要存储的内容(键值对)分别存储在这个空间，为了方便后期找到这个空间，浏览器给空间设定一个地址(16进制)
                3.把空间的地址赋值给变量

    函数数据类型
        函数数据类型也是按照引用地址来操作的
        函数： 具备一定功能的方法
        空间中存储的使函数体中的代码，但是此时的代码都是字符串中的字符而已
        函数只创建不执行没有意义：因为空间中存储的都是毫无意义的字符串
        创建函数： 
        function 函数名(){
            函数体： 实现某一个功能的具体js代码
        }
        声明的这个函数名和其他生命的变量名没有任何区别
        执行函数： 相当于使用洗衣机洗衣服(如果函数只创建了 但是没有去执行， 函数没有任何意义) 把函数体中的代码执行 浏览器创建一个供函数中代码执行的私有环境 =>‘私有作用域’
        把创建时候空间中存储的字符串拿过来，然后变为真正的js表达式代码 然后在执行
        如何执行： 函数名()
        函数名： 输出函数本身
        函数名() 把函数执行(把函数体中实现功能的代码执行)

    判断语句 if/ else if/ else
        if(条件1){
            条件1成立执行的操作
        }else if(条件2){
            上面条件不成立 条件2成立执行的操作
        }
        ...
        else {
            以上条件都不成立执行的操作
        }
        如果好几个条件都成立了 只把第一个成立的条件执行 后面成立的条件忽略不管
        条件的写法： 
            1. ==
            2. ！=
            3. >=
            4. <=
            5. >
            6. <
            if(a){
                如果条件里面值有一个值 先把值转化为布尔类型 以此来判断条件是否成立
            }
            if(a>b && a<10){
                只有两个小条件都为true 整体条件才为true
            }
            if(a>b || a ==0){
                只要其中一个小条件成立 整体条件就为true
            }

    三目运算符： 条件？ 条件成立执行：条件不成立执行
        常用的几个小情况：
            1.如果条件成立或者不成立的某一种情况并不需要做什么处理 我们空着语法不符合 我们使用null或者undefined 或者void 0占位即可
            2.三目运算符如果要执行多项操作 用小括号包起来 用逗号分割
            3.在三目运算符的操作中 不能出现break continue return这些关键词 我们无法用三元运算符代替if else

    switch case： 应用于if else中一个变量在不同值情况下的不同操作
        switch后面小括号中存放的是一个值 一般我们存放的都是一个变量 有时候也可能是个计算
        case后面放的是值加break 最后一个case后面放default
        case后面的值是为了是为了判断是否和switch后面的值是否相等 然后做处理
        default 是和switch值不相等的处理
        每一种case情况结束之后都要加break结束当前判断

    循环操作语句： 重复做一件事情
        for循环：
            语法：for(设置初始值；设置循环执行的条件；步长累加){
                循环体： 重复做的事情都在循环体当中
            }
        案例剖析：
        for(var i = 0; i < 5; i++){
            console.log(i);
            continue;//结束本轮循环 继续执行下一轮
            ...
        }
        1.设置初始值 2.设置循环执行的条件 3.条件成立执行循环体 4.不成立循环结束 步长累加
        没有步长累加 条件永远成立 就形成死循环 项目中不能出现死循环 一旦出现 循环下面的事情都做不了
        循环体当中continue后面的代码都不会执行 他会直接的去执行步长 然后进入下一轮
        break： 本意为结束整个循环 一旦循环体当中遇到break 首先后面的代码不会执行了，而且步长累加也不执行了 循环都结束

        for in 循环:
            用来遍历(循环)对象键值对的
            对象中有多少组键值对 我们的for in 循环就遍历多少次(不一定)
            每一次循环 key这个变量存储的都是当前循环这组键值对的属性名 key存储的值都是字符串格式的
            forin循环遍历的时候 大部分浏览器都是先把对象中的键值对进行排序(把数字属性名的排在前面 并且排列的时候按照数字由小到大排列) 其次再把非数字的属性名按照之前便携的顺序排列，循环的时候按照重新排列的顺序依次遍历(小数的算作字母的 不算做数字)
            for(var key in object){

                console.log(obj.key) // 获取obj中key这个属性对应的属性值 返回undefined<==>obj['key']
                
                console.log(obj[key]); // 每一次循环把key变量存储的值（当前遍历的属性名）获取到放在中括号中 获取obj中对应属性的属性值
            }

        数据类型转换
            把其他数据类型转换成number类型
                1.isNaN Number()检测的时候
                2.parseInt parseFloat
                3.在进行加减乘除数学运算的时候
                4.undefined转换成number是NaN
                5.object转换成数字类型除数组外都是NaN
                6.通过toString方法把数组转化为字符串 再调用Number把字符串转换为数字
                7.除了加法有特殊性 其余的运算符都是数学运算 也就是遇到非数字类型 需要把其转化为number 再进行运算
                8.加法的特殊性
                    在遇到字符串的时候，加号不是数学运算 而是字符串拼接 只要不遇到字符串就是数学运算
                9.字符串拼接
                    把其他的值转换为字符串然后再拼接(toString)
                    其他数据类型的toString是直接把值用单(双)引号包裹起来 只有对象的有特殊性 对象。toString()=>'[object Object]'

            把其他数据类型转换成number类型
                1.Boolean ! !!
                2.在条件判断的时候 也是转换为布尔类型，然后验证条件的真假
                3.只有0 NaN 空字符串 null undefined 5个转换为false 其余的都转换为true

            在使用==进行比较的时候 如果左右两边数据类型不相同  浏览器会默认转化为相同的类型再进行比较
            object==object比较的是地址 不同的地址空间 为false
            object==数字  对象转化为数字
            ===则不会这样操作

        数据类型的方法
            Math 数学函数 他是对象数据类型‘object’ math对象当中给我们提供了很多常用操纵数字的方法(console.dir(Math))
                Math.abs    取绝对值
                Math.ceil   向上取整
                Math.floor  向下取整
                Math.round  四舍五入
                Math.random 获取[0,1)之间的随机小数
                    获取0-10之间的随机整数：Math.round(Math.random()*10)
                    获取3-15之间的随机整数
                    Math.round(Math.random()*12+3)
                    获取[n,m]之间的随机整数：Math.round(Math.random()*(m-n)+n)
                Math.max    获取一组值中的最大值
                Math.min    获取一组值中的最小值
                Math.PI     获取圆周率 派
                Math.pow    获取一个值的多少次幂 Math.pow(10,2)
                Math.sqrt   开平方 Math.sqrt(100)

        

            String: 字符串类型
                字符串中常用的方法：在js中用单(双)引号包裹起来的都是字符串
                    字符串就是由0到多个字符组成的 以数字作为索引(从零开始)
                    1. length 存储的是当前字符串中字符的个数(字符串的长度)
                    获取第一个字符：str[0]
                    最后一个字符：str[str.length-1]

                    真实项目中，我们经常操作字符串，此时我们需要掌握常用的一些字符串操作方法
                    查看字符串方法：console.dir(String.prototype)
                charAt               返回指定索引位置的字符，和str[索引]的区别在于 当制定的索引不存在时 中括号方式获取的是undefined 而charAt获取的是空字符串
                charCodeAt           在chatAt的基础上 把获取的字符变为unicode编码值(对应放的ASCII码表十进制值)
                String.formCharCode(十进制的unicode值) 把值按照ASCII码表中的信息 转换为原有的字符 和charCodeAt刚好对应

                字符串截取
                    str.substr(n,m)
                        从索引n开始 截取m个字符
                    str.substring(n,m)
                        从索引n开始 截取到索引为m 而且不包含m 把找到的部分截取
                    str.slice(n,m)
                        和substring语法一样 slice支持以负数做索引 从后往前截取 原理是slice(str.length-n,str.length-m)
                        当索引是负数的时候 浏览器在处理的时候 是用字符串的总长度加上负数索引 然后按照正数处理操作
                    细节:
                        1.如果只传递了n(substr(n)) 相当于从索引n开始一直截取到字符串的末尾
                        2.如果传递的索引超出最大限制 也是把能借去的部分截取掉即可
                        3.如果一个参数都不传递 相当于把整个字符串都截取(字符串的克隆)

                toUpperCase
                    str.toUpperCase 把字母全部大写
                toLowerCase
                    str.toLowerCase 把字母全部小写
                indexOf
                    str.indexOf 获取当前字符在字符串中第一次出现位置的索引
                lastIndexOf
                    str.lastIndexOf 获取当前字符在字符串中最后一次出现位置的索引
                    1.如果当前字符在字符串中没有出现过 结果是-1 我们根据这个规律可以验证一下当前字符串中是否包含某个字符
                    if(str.index('?')===-1){
                        // 没有出现过
                    }
                    
                split
                    str.split 按照某一个字符把字符串拆分成数组中的某一项 和数组中的join方法是对应的
                    1.如果字符串中没有这个符号 会把字符串整体当作数组中的第一项
                    2.如果最后有一个这个字符 最后一项为空
                    3.支持正则: str.split(/=|&/g)
                replace 字符串替换
                    str.replace(‘之前字符’,‘要替换成的字符’)
                    执行一次replace只能替换一次
                    
                    如果有好几个都需要替换 在不使用正则的情况下我们需要执行很多次replace
                    
                    替换之后原有字符串不变 要把原有字符串重新赋值再替换
                    
                    如果执行中有重复的 第二次会把替换过的再替换一次
                    str=str.replace(‘/之前字符/g’,‘要替换成的字符’)
                    
                    有些需求即使执行很多次replace也实现不了 此时需要使用正则处理 真实项目中replace一般都是和正则搭配使用的
                
                trim
                    str.trim 去除字符串首位的空格
                trimLeft
                    str.trimLeft 去除字符串开始的空格
                trimRight
                    str.trimRight 去除字符串结尾的空格
                
                quertURLParameter: 获取地址栏中URL地址问号传递的参数值
                    目标 把问号传递的参数值分别解析出来
                    obj = {wd:‘javascript’,rsv_spt:1,issp:1}

                match

            DOM获取元素方法
                getElementById
                getElementsByTagName
                getElementsByName
                getElementsByClassName
                document.documenElement
                document.body
                querySelector
                querySelectorAll

            DOM节点
                            nodeType    nodeName  nodeValue
                元素节点        1        标签名大写    null
                文本节点        3         #text      文本内容
                注释节点        8        #comment    注释内容
               document        9       #document    null

            DOM节点关系属性
                childNodes
                children
                parentNode
                previousSibling
                nextSibling
                firstChild
                lastChild

            DOM动态操作
                createElement
                appendChild
                insertBefore
                cloneNode
                removeChild
                replaceChild
                get/set/removeAttribute

    DOM操作：getElementById getElementsByTagName

    DOM基础精讲
        DOM: document object model 文档对象模型 提供一些属性和方法可以让我们去操作DOM元素
        
        获取DOM元素的方法
            document.getElementById 获取一个元素 通过元素的ID来获得这个元素
                1.此方法的上下文只能是document
                2.一个HTML页面中元素的ID理论上是不能重复的
                3.如果页面当中的ID重复了 我们获取的结果是第一个ID对应的元素
                4.在IE7以下版本中 会把表单元素的name当作ID来识别使用(项目中 尽量不要让表单的name和其他元素的ID相同)
                5.如果我们把js放在结构的下面 我们可以直接使用ID的值来获取这个元素(不需要通过getElementById获取) 而且这种方式会把页面中所有ID是它的元素都获取到(元素对象/元素集合) => 不推荐
                6.获取页面中所有ID值相同的元素
                var allList = document.getElementsByTagName(‘*’),
                result = [];
                for(var i = 0; i < allList.length; i++){
                    var item = allList[i];
                    item.id === 'id'?result.push(item):null
                }
                console.log(result);

            [context].getElementsByTagName 在指定范围里面通过元素的标签名 来获得一组元素的集合
                上下文是可以自己来指定
                获取到的结果是一个元素集合(类数组集合)
                1.获取到的结果是集合 哪怕集合中只有一项 我们想要操作的是这一项(元素对象) 需要先从集合中获取出来然后再操作
                2.在指定的上下文当中 获取所有子子孙孙元素中标签名叫这个的

            [context].getElementsByClassName 通过元素的类名来获得一组元素集合
                1.真实项目当中我们经常会通过样式类名来获取元素
                2.不兼容IE6-8
                3.兼容处理
                function byClass(strClass, context) {
                    context = context || document;
                    if (isHighBersion) return [].split.call(context.getElementsByClassName(strClass));

                    strClass = strClass.replace(/^\s+|\s+$/g, '').split(/\s+/g);
                    var tagList = context.getElementsBytagName('*'),
                        result = [];
                    for (var i = 0; i < tagList.length; i++) {
                        var item = tagList[i],
                            itemClass = item.ClassName;
                        var isMatch = true;
                        for (var k = 0; k < strClass.length; k++) {
                            var reg = new RegExp('(^| +)') + strClass[k] + '( +|$)';
                            if (!reg.test(itemClass)) {
                                isMatch = false;
                                break;
                            }
                        }
                        isMatch ? result.push(item) : null;
                    }
                    return result;
                }

            document.getElementsByName 通过name元素来获得一组节点集合
                通过元素的name属性获取一组元素 (类数组 节点集合 NodeList)
                它的上下文也是document
                1.IE浏览器当中只能识别表单元素的name属性值 所以我们这个方法一般都是用来操作表单元素的

            document.documentElement 获取整个HTML对象
                获取的是一个元素对象
                document.documentElement.clientWidth 获取当前浏览器窗口可视区的宽度(当前页面一屏幕的宽度)
                document.documentElement.clientHeight 获取高度

            document.body 获取整个body对象
                获取的是一个元素对象
                document.body.clientWidth 获取当前浏览器窗口可视区域的宽度(当前页面一屏幕的宽度)
                document.body.clientHeight 获取高度
                
            document.head 获取head对象
            
            [context].querySelector 通过选择器来获取一个元素对象
                在IE6-8 不兼容 而且也没什么特别好办法处理兼容
                一般多用物移动端开发使用
                只要是css支持的选择器  这里大部分都支持
            
            [context].querySelectorAll 获取所有的选择器元素集合
                在IE6-8 不兼容 而且也没什么特别好办法处理兼容
                一般多用物移动端开发使用
                只要是css支持的选择器 这里大部分都支持

    DOM的节点
        node: 节点,浏览器认为在一个html页面中所有内容都是节点(标签 注视 文字文本等)
            元素节点: html标签
                nodeType: 1
                nodeName: 大写的标签名(在部分浏览器的怪异模式下 我们写的标签名是小写 它获取的就是小写 大写获取的就是大写)
                nodeValue: null
                [元素].tagName 获取当前元素的标签名(获取的标签名一般都是大写)

            文本节点: 文字内容(高版本浏览器会把空格和换行也当作文本节点)
                nodeType: 3
                nodeName: #text
                nodeValue: 文本内容
            注释节点:注释内容
                nodeType: 8
                nodeName: #comment
                nodeValue: 注释内容
            document文档节点
                nodeType: 9
                nodeName: #document
                nodeValue: null

        节点是用来描述页面中每一部分之间关系的 只要我们可以获取页面中的一个节点 那么我们就可以通过相关的属性和方法获取到页面中所有的节点
            childNodes 获取当前元素所有的子节点(节点集合  类数组) 不仅仅是元素子节点 文本注释等都会包含在内 子节点说明只是在儿子辈份中查找
            children   获取所有的元素子节点(元素即可)
                在IE6-8下获取的结果和标准浏览器中有区别 (IE6-8会把注释节点当作元素节点获取到)
            parentNode 获取当前元素的父节点(元素对象)
            previousSibling nextSibling 获取当前节点的上一个(下一个)兄弟节点(不一定是元素节点 也可能是文本或者注释)
            previousElementSibling nextElementSibling 获取当前节点的上一个(下一个)兄弟元素节点
                IE6-8不兼容
            firstChild lastChild 当前元素所有子节点当中的第一个(最后一个)节点(不一定是元素节点 可能是文本和注释)
            firstElementChild lastElementChild (IE6-8不兼容)
    
    DOM增删改
        真实项目中,我们偶尔会在js中动态创建一些HTML标签 然后把其增加到页面中
        document.createElement
            在js中动态创建一个html标签
        appendChild
            容器.appendChild(新元素)
                把当前创建的新元素添加到容器的末尾位置
        insertBefore
            容器.insertBefore(新元素,老元素)
                在当前容器当中 把新创建的元素增加到老元素之前

        真实项目中  很多需求都是通过动态创建元素来完成的 其中有一个需求 解析一个URL地址每一部分的信息(包含?传参值)
            1. 纯字符串拆分截取
            2.正则捕获到需要的结果
            3.通过动态创建一个A标签 利用A标签的一些内置属性来分别获取每一部分的内容
            var link = document.createElement('a');
            link.href = 'http://www.baidu.com/stu/?name=baidu&age=27#text' //=> 此处的地址就是我们需要解析的URL

            hash 存储的是哈希值 #text 
            hostname: 存储的是域名 'www.baidu.com'
            pathname: 存储的是请求资源的路径名称 '/stu/'
            protocol: 协议 'http:'
            search: 存储的是问号传递的参数值 没有传递是空字符串 'name=baidu&age=27'

            function queryURLParameter(url){
                var link = document.creatElement('a');
                link.href = url;
                var search = link.search,
                obj = {};
                if(search.length === 0) return;
                search.substr(1).split(/&|=/g);
                for(var i = 1;i<search.length;i+=2){
                    var key = search[i];
                    var value = search[i+1];
                    obj[key] = value;
                }
                link = null;
                return obj;
            }
        removeChild
            容器.removeChild(元素)
                在当前容器当中 把某一个元素移除掉

        replaceChild 
            容器.replaceChild(新元素,老元素)
                当前容器中 拿新元素替换老元素

        cloneNode
            元素.cloneNode(false/true)
                把原有元素克隆一份一模一样的 false: 只克隆当前元素本身,true: 深度克隆 把当前元素本身以及元素的所有后代都进行克隆

        函数是实现某一个功能的方法
            在真实项目中 我们一般会把实现一个具体功能的代码封装在函数中 
                1.如果当前这个功能需要在页面中执行多次,不封装成为函数 每一次实现这个功能难过,都需要重新把代码写一遍 浪费时间 而封装在一个函数中 以后想实现多次这个功能 我们就没有必要在重新写代码了 只需要把函数重新执行即可 提高了开发效率
                2.封装在一个函数中 页面就基本上很难出现重复一样的代码了 减少了页面中代码的冗余度 提高了代码的重复利用率 低耦合高内聚
                我们把以上的特点统称为函数的封装(oop面向对象编程思想 需要我们掌握的就是类的继承 封装 多态)
            函数的核心原理
                函数作为js中引用数据类型中的一种 也是按照引用地址来操作的
            创建函数
                首先会在当前作用于中声明一个函数名(生命的函数名和使用var声明的变量名是一样的操作)
                浏览器首先会开辟一个新的内存空间(分配一个16进制地址) 把函数体中写好的代码当作普通字符串存储在这个内存空间中(创建一个函数 如果不执行 函数没有意义)
                把内存空间的地址赋值给之前声明的那个函数名
              function [函数名]() {
                //=> [函数体]
                //实现功能的具体代码
              }
            执行函数
                目的: 把执勤啊存储的实现具体功能的js代码执行

                函数执行 
                浏览器首先会为其开辟一个新的私有作用域(只能执行函数中之前编写的js代码)
                形参赋值
                私有作用域中的变量提升
                把之前创建时候存储的那些js代码字符串 拿到私有作用域中 然后把他们变成js表达式从上到下执行
                私有作用域是否销毁的问题

        闭包: 
            函数执行会形成一个私有作用域 让里面的私有变量和外界互不影响(互不干扰 外面的无法直接获取里面的变量值) 此时我们可以理解为私有作用域把私有变量保护起来 我们把这种保护机制称之为闭包

        栈内存
            作用域(全局作用域/私有作用域): 提供一个供js代码执行的环境
        堆内存
            所有的引用数据类型 他们需要存储的内容都在堆内存中(相当于一个仓库 目的时存储信息)
                对象会把键值对存储进来
                函数会把代码当作字符串存储进来

        函数中的形参和实参
            形参:相当于生产洗衣机的时候提供的入口,需要用户执行函数的时候把需要的值传递进来 形参是个变量 用来存储和接收这些值
            实参:用户执行时候传递给形参的具体值

        arguments 实参集合
            当我们不知道用户具体要传递几个值的时候(传递几个值都行),我们无法设置形参个数: 遇到此类需求, 需要使用函数内置的实参集合: arguments
            1.arguments只有函数才有
            2.不管执行函数的时候是否传递是惨, arguments天生就存在,没有传递实参 arguments是个空的集合,传递了arguments中包含了所有传递的实参值
            3.不管是否设置了形参 arguments中始终存储了所有的实参信息
            4.arguments是对象类型 是一个类数组集合
                1.以数字作为索引(属性名) 从零开始
                2.arguments[0] 第一个实参信息
                3.arguments有一个length属性 存储的是当前集合的长度(当前传递实参的个数) argumrnts.length
            5.arguments.callee 存储的是当前函数本身
            6.arguments.callee.caller 存储的是当前函数在哪执行的(宿主函数),在全局作用域下执行的,结果是null 在函数内执行 结果是函数
            7.严格模式下 arguments.callee 不允许使用
    js中的返回值 return
        1.返回值是函数提供的一个出口 我们如果想要在外面使用函数私有的一些信息 那么就需要通过return 把这些信息返回出来供外面使用
        2.return后面跟着的都是值(返回的都是值) 此处不是把变量返回 而是把返回的东西存储的值返回而已
        3.如果写函数() 让函数执行 代表的是当前函数返回的结果(return后面是啥 相当于函数返回的是啥)
        4.如果函数中没有return或者return后面啥都没有 默认返回的结果就是undefined
        5.在函数当中 遇到return之后 return后面的代码不再执行
    
    js中的匿名函数
        函数表达式
            把一个没有名字的函数作为值赋值给一个变量或者一个元素的一个元素的某个事件等
        自执行函数 富豪只是控制语法规范
        (function(){})()
        ~function(){}()
        -function(){}()
        +function(){}()
        !function(){}()
    
    数组的基础结构
        数组也是对象数据类型 typeof [] -> 'object'

        数组也有属性名 只不过属性名是数字 我们把数字属性名称之为她的索引 数组是以数字作为索引 索引从零开始 有一个length属性代表数组的长度

        类数组 类似于数组 但是不是数组
            1.通过getElementsByTagName获取的数组集合是类数组
            2.函数中的实参集合arguments也是类数组

        循环数组中的每一项
            for(var i = 0; i<ary.length; i++){
                console.log(ary[i])
            }
            for (var key in ary) {
                console.log(ary[key])
            }
            for循环和for in循环的区别
                for循环只能遍历到数组私有的一些属性
                for in循环可以把一些自定义的公共属性也能遍历到
        
        数组中常用的方法
            数组中有很多常用的方法console.dir(Array.prototype)

            1.方法的意义和作用
            2.方法的形参
            3.方法的返回值
            4.通过此方法 原来的数组是否发生了变化
            实现数组的增、删、改
                增: push 向数组的末尾追加新内容
                    参数: 一到多个 任何数据类型都可以 想要给数组末尾追加什么 直接传递到push方法中即可 传递多个用逗号隔开
                    返回值: 新增后数组的长度
                    原有数组改变
                    unshift 想数组的前边追加新内容 同push
                    把数组当作一个普通的对象 使用对象键值对的操作 给其设置新属性(索引)
                    ary(ary.length)=xxx 向数组的末尾追加了新的内容
                删:pop 删除数组最后一项
                    参数: 无
                    返回值: 被删除的那一项内容
                    原有数组改变
                  shift: 删除数组第一项‘
                    参数: 无
                    返回值: 被删除的那一项内容
                    原有数组改变
                    使用shift删除第一项之后后面每一项的索引都要向前进一位(导致后面项的索引发生改变)
                  把数组当作普通对象操作
                    delete ary[索引] 删除制定索引这一项(当前项被删除后 原有数组其他项的索引不会改变 当前数组的length也不会改变)
                  ary.length--: 删除数组最后一项

                  splice 数组中内置的方法 可以实现数组的增删改
                    splice实现删除: 
                        splice(n,m) 
                        参数: 从索引n开始删除m个(m不写 删除到数组的末尾)
                        返回值: 被删除的内容(以一个新书组保存被删除的内容)
                        原有数组改变
                        splice(0) 清空数组
                        splice() 一项都不删除 返回一个新的空数组
                        splice(0,1) 删除第一项
                        splice(ary.length-1) 删除最后一项
                    splice实现修改:
                        splice(n,m,x): 在原有删除的基础上 用x代替删除的内容
                    splice实现增加
                        splice(n,0,x) 在修改的基础上 我们一项都不删除 把x插入到索引n的前面
                    ary.splice(0,0,x) 向数组开头追加新内容
                    ary.splice(ary.length,0,x) 向数组末尾追加新元素
                splice支持负数索引 如果传递的索引为负数 浏览器解析的时候是按照 总长度+负数索引 来处理
            数组查询:
                slice: 数组的查询
                参数: slice(n,m) 从索引n开始 找到索引为m处(不包含m)
                返回值: 把找到的部分以一个新数组返回
                原有数组不变
                slice(n) 从索引n开始找到末尾
                slice(0) /slice() 数组克隆 克隆一份和原来数组一模一样的数组
                slice支持负数索引 如果传递的索引为负数 浏览器解析的时候是按照 总长度+负数索引 来处理
            将两个数组进行拼接
                concat 将多个数组拼接在一起
                参数: 要拼接的内容(把内容放在原数组的后面) 可以是一个数组 也可以是一些数据值
                返回值: 拼接后的新数组
                原有数组不变
                concat() 什么都没有拼接 相当于把原有数组克隆一份一模一样的新数组出来

            数组转化为字符串
                toString: 把数组转化为字符串(转换后的字符串以逗号分割每一项)
                参数: 无
                返回值: 转换的字符串
                原有数组不变

                join: 把数组按照指定的分隔符转换为字符串 和字符串中的split相对应
                参数: 指定分隔符
                返回值: 转换后的字符串
                原有数组不变

            数组求和: 已知数组中的每一项都是数字 想实现数组求和 如何实现
                1.循环实现
                    var total =null
                    for(var i=0;i<ary.length;i++){
                        total+=ary[i]
                    }
                2.join
                    var eval(ary.join('+'))
                        eval: 把字符串变为js表达式执行
            数组中每一项的排序和排列
                reveres:把数组中的每一项倒过来排列
                参数: 无
                返回值: 排序后的数组
                原有数组改变
                sort 实现数组的排序
                参数: 无或者回调函数
                返回值: 排序后的数组
                原有数组改变
                不传参数的情况下  可以给十以内的数字进行升序排列 但是超过10的就无法处理了(多位数只识别第一位)
                sort(function(a,b){
                    //return a-b (升序)
                    //return b-a (降序)
                })

            验证数组中是否包含某一项
                indexOf /lastIndexOf 获取当前项在数组中第一次或者最后一次出现位置的索引
                    数组中的这两个方法在IE6-8下不兼容
                    字符串中的这两个方法兼容所有的浏览器
                  如果当前数组中并没有这一项 返回的索引是-1 我们根据这一点可以验证数组中是否包含这一项
                  if(ary.indexOf(12)>-1){
                      //数组中包含12
                  }
                //自定义IndexOf方法(兼容写法)
                  Array.prototype.myIndexOf = function myIndexOf(){
                      var result = -1;
                      for(var i=0;i<this.length;i++){
                          if(value===this[i]){
                              result = i;
                              break;
                          }
                          return result;
                      }
                  }

                遍历数组中每一项的方法
                    以下方法在IE6-8下都不兼容
                    forEach: 遍历数组中的每一项
                    ary.forEach(function(value,index){
                        //=>数组中有多少项 当前回调函数执行多少次 每一次传递进来的value就是当前遍历数组这一项的值 index就是遍历这一项的索引
                    });

                    map: 遍历数组中的每一项,在forEach的基础上 可以修改每一项的值
                    ary.map(function(value,index){
                        //=>数组中有多少项 当前回调函数执行多少次 每一次传递进来的value就是当前遍历数组这一项的值 index就是遍历这一项的索引
                        return xxx; //=> return后面返回的结果就是把当前遍历的这一项修改成xxx
                    });

                    filter
                    find
                    reduce
                    every
                数组去重
                    1.遍历数组中的每一项 拿每一项和它后面的项依次比较 如果相同了 则把相同的这一项在原来数组中删除即可
                    for (var i = 0; i < ary.length - 1; i++) {
                        var cur = ary[i];
                        for (var j = i + 1; j < ary.length; j++) {
                            cur === ary[j] ? ary.splice(j,1) : j++;
                        }
                    }
                    console.log(ary)
                    数组塌陷问题: 我们使用splice删除数组中的某一项后 删除这一项后面的每一项索引都要向前进一位(在原有索引上减一) 此时如果我们i++ 循环操作的值累加了 我们通过最新i获取的元素不是紧挨删除这一项的元素 而是跳过这一项获取的元素
                
                    2.利用indexOf来验证当前数组中是否包含某一项 包含把当前项删除掉
                    for(var i=0;i<ary.length;i++){
                        var cur = ary[i];
                        var curNextAry = ary.slice(i+1);
                        if(curNextAry.indexOf(cur)>-1){
                            ary.splice(i,1)
                            i--;
                        }
                    }
                    console.log(ary)

                    3.对象键值对处理
                    遍历数组中的每一项 把每一项作为新对象的属性名和属性值存储起来 例如 当前项1,对象中存储的[1:1]
                    在每一次向对象中存储之前 首先看一下原有对象中是否包含了这个属性 (typeof obj[xxx]===‘undefined’ 说明当前对象中没有xxx这个属性) 如果已经存在这个属性说明数组中的当前香书重复的(1-在原有数组中删除这一项2-不再向对象中存储这个结果) 如果不存在(把当前项作为对象的属性名和属性值存储进去即可)
                    var obj = {};
                    for (var i = 0; i < ary.length; i++){
                        var cur = ary[i];
                        if(typeof obj[cur] !== 'undefined'){
                            //对象中已经存在该属性 证明当前项是数组中的重复项
                            //ary.splice(i,1); //使用splice会导致后面的索引向前进一位 如果后面又很多项 消耗性能很大
                            //我们把最后一项拿过来 替换当前要删除的这一项 然后把最后一项删除
                            ary[i] = ary[ary.length - 1];
                            ary.length--
                            i--;
                            continue;
                        }
                        obj[cur] = cur;//=>obj[1]=1 {1:1}存储
                    }
                    console.log(ary)

                    相邻比较法
                    首先给数组进行排序 然后相邻两项比较 相同的话 把后一项在数组中去掉

                数组排序
                    1.sort(function(a,b){
                        return a-b
                    })
                    2.冒泡排序
                    原理: 让数组中的当前项和后一项进行比较 如果当前项大于后一项 我们让两者交换位置

    面试题： console.log(typeof typeof [])
        一个js文件函数中调用另一个js文件函数的方法
            new_element = document.createElement('script');
                new_element.setAttribute("type","text/javascript");
                new_element.setAttribute("src","a.js");
                document.body.appendChild(new_element);
                function b () {
                    a();
                }
            利用document.createElement('script')生成了一个script的标签，设置其type属性为text/javascript,src为a.js(这里的a.js同b.js放在同一个目录，也可放在不同的目录)。最后将这个标签动态的加入body中

        var num = parseFloat('width:12.5px');
        if(num == 12.5){
            alert (12.5);
        }else if(num == NaN) {
            alert(NaN);
        }else if(typeof num == 'number'){
            alert(0)
        }else{
            alert('啥也不是')
        }

        for(var i=1;i<10;i+=2){
            if(i<5){
                i++;
                continue;
            }else{
                i+=3;
                break;
            }
            console.log(i);
        }
        console.log(i)

        把页面中所有ID相同的都获取到
            var allList = document.getElementsByTagName('*'),
                result = {};
            for(var i=0;i<allList.length;i++){
                var item = allList[i];
                item.id === 'ID' ? result.push(item):null;
            }
            console.log(result);

        1-100之间把所有能被3并且能被5整除的获取到 累加求和
            1. for循环
            var total = null;
            for (var i = 1; i <= 100; i++){
                if(i % 3 === 0 && i % 5 === 0) {
                    total += i
                }
            }
            2. 递归
            function fn(num){
                if(num>100){
                    return 0;
                }
                if(num%15===0){
                    return num + fn(num+1);
                }
                return fn(num+1)
            }
            fn(1)

        什么叫标签语义化  合理的标签做合适的事情
        行内元素  
        块级元素
        块和行的区别
        块和行怎么转换
        display都有哪些值
        隐藏元素的方式
        透明度的设置 IE怎么设置
        flex布局  布局方式 和传统的响应式布局的区别
        bootStrap源码 有没有基于flex布局来做 有没有看过源码
